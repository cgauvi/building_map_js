# Lightweight Alpine-based pg_tileserv Docker Image
# Author: Just van den Broecke
FROM golang:1.15.5-alpine3.12


ENV LC_ALL=C.UTF-8 \   
 LANG=C.UTF-8 \    
 PYTHONPATH="/usr/local/app/" \    
 MPLBACKEND="agg" \    
 REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

# This certificate was added manually after running into bugs with go proxy..
COPY  cert_go.crt /usr/local/share/ca-certificates/cert_go.crt

RUN update-ca-certificates

RUN apt-get update && apt-get install -y python3.8 python3-pip ca-certificates curl && \    
    curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ-Issuer1-2022.crt > /usr/local/share/ca-certificates/SSQ-Issuer1-2022.crt; \  
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ-Issuer1.crt > /usr/local/share/ca-certificates/SSQ-Issuer1.crt; \    
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ-Issuer2-2022.crt > /usr/local/share/ca-certificates/SSQ-Issuer2-2022.crt; \  
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ-Issuer2.crt > /usr/local/share/ca-certificates/SSQ-Issuer2.crt; \  
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ-Server-CA-20310329-01-2015-10-05-LAST.crt > /usr/local/share/ca-certificates/SSQ-Server-CA-20310329-01-2015-10-05-LAST.crt; \
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/SSQ_EXT_CA.crt > /usr/local/share/ca-certificates/SSQ_EXT_CA.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-root.crt > /usr/local/share/ca-certificates/aws-pki-root.crt; \
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-corpo.crt > /usr/local/share/ca-certificates/aws-pki-scs-corpo.crt; \
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-dev-ac.crt > /usr/local/share/ca-certificates/aws-pki-scs-dev-ac.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-ac.crt > /usr/local/share/ca-certificates/aws-pki-scs-ac.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/LaCapitale-RootCA.crt > /usr/local/share/ca-certificates/LaCapitale-RootCA.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-dev-corpo.crt > /usr/local/share/ca-certificates/aws-pki-scs-dev-corpo.crt; \  
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-dev-ti.crt > /usr/local/share/ca-certificates/aws-pki-scs-dev-ti.crt; \  
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-ti.crt > /usr/local/share/ca-certificates/aws-pki-scs-dev-ti.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs-dev.crt > /usr/local/share/ca-certificates/aws-pki-scs-dev.crt; \ 
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/aws-pki-scs.crt > /usr/local/share/ca-certificates/aws-pki-scs.crt; \    
	curl -k https://git.ssqti.ca/projects/ANS/repos/system-playbook/raw/roles/system-java/files/keystore/Beneva-RootCA.crt > /usr/local/share/ca-certificates/Beneva-RootCA.crt; \ 
	update-ca-certificates

# Build ARGS
ARG VERSION="latest-alpine-3.12"

RUN mkdir /app
ADD . /app/
WORKDIR /app
RUN go build -v  -ldflags "-s -w -X main.programVersion=${VERSION} "

# Multi-stage build: only copy build result and resources
FROM alpine:3.12

LABEL original_developer="Crunchy Data" \
    contributor="Just van den Broecke <justb4@gmail.com>" \
    vendor="Crunchy Data" \
	url="https://crunchydata.com" \
	release="${VERSION}" \
	org.opencontainers.image.vendor="Crunchy Data" \
	os.version="3.12"

RUN apk --no-cache add ca-certificates && mkdir /app
WORKDIR /app/
COPY --from=0 /app/pg_tileserv /app/
COPY --from=0 /app/assets /app/assets

VOLUME ["/config"]

USER 1001
EXPOSE 7800

ENTRYPOINT ["/app/pg_tileserv"]
CMD []

# To build and run specific version
#
# export VERSION="latest-alpine-3.12"
# docker build --build-arg VERSION=${VERSION} -t pramsey/pg_tileserv:${VERSION} -f Dockerfile.alpine
#
# Best is to use another PostGIS Docker Container whoose host is reachable from the pg_tileserv Container.
# docker run -dt -e DATABASE_URL=postgres://user:pass@host/dbname -p 7800:7800 pramsey/pg_tileserv:${VERSION}
#
# See a full example using Docker Compose under examples/docker
#
